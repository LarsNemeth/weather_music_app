[{"/home/user/Desktop/DCI_Projekte/weather_music_app/src/index.js":"1","/home/user/Desktop/DCI_Projekte/weather_music_app/src/reportWebVitals.js":"2","/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js":"3","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Song.js":"4","/home/user/Desktop/DCI_Projekte/weather_music_app/src/data.js":"5","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Library.js":"6","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Player.js":"7","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Nav.js":"8","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js":"9","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/LibrarySong.js":"10","/home/user/Desktop/DCI_Projekte/weather_music_app/src/services/apiKeys.js":"11","/home/user/Desktop/DCI_Projekte/weather_music_app/src/services/getCityImage.js":"12","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Intro.js":"13"},{"size":478,"mtime":1637143073131,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1637143073131,"results":"16","hashOfConfig":"15"},{"size":6329,"mtime":1640029852704,"results":"17","hashOfConfig":"15"},{"size":721,"mtime":1640031327288,"results":"18","hashOfConfig":"15"},{"size":1951,"mtime":1639735375416,"results":"19","hashOfConfig":"15"},{"size":707,"mtime":1638355593304,"results":"20","hashOfConfig":"15"},{"size":5921,"mtime":1639660729997,"results":"21","hashOfConfig":"15"},{"size":855,"mtime":1638535219163,"results":"22","hashOfConfig":"15"},{"size":3684,"mtime":1640015148121,"results":"23","hashOfConfig":"15"},{"size":1495,"mtime":1639660416613,"results":"24","hashOfConfig":"15"},{"size":654,"mtime":1639660706509,"results":"25","hashOfConfig":"15"},{"size":529,"mtime":1638809001150,"results":"26","hashOfConfig":"15"},{"size":556,"mtime":1640032752168,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"26je0v",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Desktop/DCI_Projekte/weather_music_app/src/index.js",[],["58","59"],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/reportWebVitals.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js",["60"],"import React, { useState, useRef, createContext } from 'react';\n\n// Import Styles\nimport './styles/app.scss';\n\n// Import Components\nimport Intro from './components/Intro';\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather';\n\n//Import Util\nimport data from './data';\n\n// Export weatherMuscicContext API\n\nexport const weatherMusicContext = createContext({});\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  //! State For Time (aktuell)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  //! Library State\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  //! IntroLogo\n  const [intro, setIntro] = useState(null);\n\n  //! Weather State\n  const [weatherStatus, setWeatherStatus] = useState(false);\n  const [weatherdata, setWeatherData] = useState(null);\n\n  //! Weather City\n  const [city, setCity] = useState('Hamburg');\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //! Berechnung der Prozent des Fortschrittsbalken\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    // console.log(animation);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n    // console.log(current);\n  };\n\n  //! Change Music Weater Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n  const changeMood = (weatherdata) => {\n    // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    const weatherCondition = weatherdata.weather[0].main;\n    if (weatherCondition === 'Snow') {\n      setCurrentSong(songs[2]);\n    }\n    if (weatherCondition === 'Clouds') {\n      setCurrentSong(songs[3]);\n    }\n    if (weatherCondition === 'Rain') {\n      setCurrentSong(songs[0]);\n    }\n    if (weatherCondition === 'Clear') {\n      setCurrentSong(songs[1]);\n    }\n    if (weatherCondition === 'Mist') {\n      setCurrentSong(songs[4]);\n    }\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    // console.log('select song');\n\n    setSongs(newSongs);\n    // check if the song is playing\n    if (isPlaying) audioRef.current.play();\n  };\n\n  //! Change Music Weater Mood Context-API\n\n  const bgimgChange = () => {\n    // console.log(weatherdata);\n    if (weatherdata === null) {\n      return;\n    }\n\n    // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    const weatherCondition = weatherdata.weather[0].main;\n\n    //! Snow\n    if (weatherCondition === 'Snow') {\n      return 'weather-app-snow';\n    }\n    //! Clowds\n    if (weatherCondition === 'Clouds') {\n      return 'weather-app-clowds';\n    }\n    //! Rain\n    if (weatherCondition === 'Rain') {\n      return 'weather-app-rain';\n      //! Sun\n    }\n    if (weatherCondition === 'Clear') {\n      return 'weather-app-sun';\n    }\n    //!Mist\n    if (weatherCondition === 'Mist') {\n      return 'weather-app-mist';\n    }\n  };\n\n  //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\n  //* return ************\n  return (\n    <weatherMusicContext.Provider value={{ changeMood }}>\n      <div className={`bg-starter-img`}>\n        <div className={bgimgChange()}>\n          <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n            <div className={`App ${weatherStatus ? 'weather-active' : ''}`}>\n              <Nav\n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus}\n                weatherStatus={weatherStatus}\n                setWeatherStatus={setWeatherStatus}\n              />\n              <Weather\n                weatherStatus={weatherStatus}\n                city={city}\n                setCity={setCity}\n                weatherdata={weatherdata}\n                setWeatherData={setWeatherData}\n              />\n              <div>\n                <Song\n                  currentSong={currentSong}\n                  isPlaying={isPlaying}\n                  intro={intro}\n                  setIntro={setIntro}\n                />\n                <Player\n                  audioRef={audioRef}\n                  setIsPlaying={setIsPlaying}\n                  isPlaying={isPlaying}\n                  currentSong={currentSong}\n                  setSongInfo={setSongInfo}\n                  songInfo={songInfo}\n                  songs={songs}\n                  setSongs={setSongs}\n                  setCurrentSong={setCurrentSong}\n                />\n                <Library\n                  audioRef={audioRef}\n                  songs={songs}\n                  setCurrentSong={setCurrentSong}\n                  isPlaying={isPlaying}\n                  setSongs={setSongs}\n                  libraryStatus={libraryStatus}\n                />\n                <audio\n                  onTimeUpdate={timeUpdateHandler}\n                  onLoadedMetadata={timeUpdateHandler}\n                  ref={audioRef}\n                  src={currentSong.audio}\n                  //! Skip to the next song if ended // Brauchen wir (noch nicht)\n                  // onEnded={songEndHandler}\n                ></audio>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </weatherMusicContext.Provider>\n  );\n}\n\nexport default App;\n","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Song.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/data.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Library.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Player.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Nav.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js",["61","62","63","64"],"import React, { useEffect, useContext, useState } from 'react';\nimport { getWeatherData } from '../../services/apiKeys';\nimport { getCityImage } from '../../services/getCityImage';\n\nimport { weatherMusicContext } from '../../App';\n\nconst Weather = ({\n  weatherStatus,\n  city,\n  setCity,\n  weatherdata,\n  setWeatherData,\n}) => {\n  const { changeMood } = useContext(weatherMusicContext);\n  const [_city, _setCity] = useState(city);\n\n  //! Get the Weatherdata from openweather\n  const getData = async (city) => {\n    try {\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      // console.log('Data from my getDate-Funcion', data);\n      changeMood(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from openweather_API\", error.message);\n    }\n  };\n\n  // //! Get the ImageData from unsplash\n  const getImageData = async (city) => {\n    try {\n      const data = await getCityImage(city);\n\n      // console.log(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from unsplash_API\", error.message);\n    }\n  };\n\n  //***************************************************************** */\n  //* Change City Name *********\n  const onChangeCity = (e) => {\n    _setCity(e.target.value);\n  };\n\n  //* Button Function *********\n  const onClickButton = () => {\n    setCity(_city);\n    getData(_city);\n    getImageData(_city);\n  };\n\n  // //* UseEffect / getData running *********\n  // useEffect(() => {\n  //   getData();\n  // }, []);\n\n  //* Date Operator ******\n\n  const dateBuilder = () => {\n    let d = new Date();\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n      'Sunday',\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  // console.log('Clowdy, rainy or sunny', weatherdata.weather[0].main);\n  // console.log('This is my weatherdata from Weather.js:', weatherdata);\n  // console.log('This is my cityData:', city);\n\n  return (\n    <div className={`weather ${weatherStatus ? 'active-weather' : ''}`}>\n      <div\n        className=\"weather-app\"\n        style={{\n          backgroundImage:\n            'url(' + `https://source.unsplash.com/500x800/?${city}` + ')',\n        }}\n      >\n        <div>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"City Sounds\"\n              onChange={onChangeCity}\n            />\n            <button type=\"button\" onClick={onClickButton}>\n              Search\n            </button>\n          </div>\n          {weatherdata != null ? (\n            <div className=\"weather-wrap\">\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weatherdata.name} | {weatherdata.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder()}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {parseFloat(weatherdata.main.temp - 273.15).toFixed(0)}Â°C\n                </div>\n                <div className=\"weather-condition\">\n                  {weatherdata.weather[0].main}\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/LibrarySong.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/services/apiKeys.js",[],"/home/user/Desktop/DCI_Projekte/weather_music_app/src/services/getCityImage.js",["65"],"import axios from 'axios';\n\nconst baseUrl = 'https://api.unsplash.com/photos/?';\nconst apiKey = 'MJjEHsquM6wGUZ-EaKn2JUfYGDHMMhcpVAqeq0L-cr0';\n\n// baseUrl + `q=${cityname}&appid=${apiKey}`;\n\nexport const getCityImage = async (cityimage) => {\n  try {\n    const response = await axios.get(\n      baseUrl + `q=${cityimage}&client_id=${apiKey}`\n    );\n    const data = await response.data;\n    // console.log('My unsplash API from getCityImage', response.data);\n\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n","/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/Intro.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":13},{"ruleId":"70","severity":1,"message":"74","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"75","line":32,"column":13,"nodeType":"72","messageId":"73","endLine":32,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":104,"column":20,"nodeType":"78","messageId":"79","endLine":104,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":104,"column":69,"nodeType":"78","messageId":"79","endLine":104,"endColumn":70},{"ruleId":"70","severity":1,"message":"75","line":13,"column":11,"nodeType":"72","messageId":"73","endLine":13,"endColumn":15},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Intro' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'data' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]