{"ast":null,"code":"var _jsxFileName = \"/Users/MrDjuke/Desktop/Project/weather_music_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; // Import Styles\n\nimport \"./styles/app.scss\"; // Import Components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\nimport Weather from \"./components/Weather\"; //Import Util\n\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //! State For Time (aktuell)\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  }); //! Library State\n\n  const [libraryStatus, setLibraryStatus] = useState(false); //! Weather State\n\n  const [weatherStatus, setWeatherStatus] = useState(false); //! Time Update\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //! Berechnung der Prozent des Fortschrittsbalken\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    console.log(animation);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n    console.log(current);\n  }; //! Wenn der Song endet spiele den nächsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n  //* return ************\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${libraryStatus ? \"library-active\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus,\n      weatherStatus: weatherStatus,\n      setWeatherStatus: setWeatherStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Weather, {\n      weatherStatus: weatherStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio //! Skip to the next song if ended // Brauchen wir (noch nicht)\n      // onEnded={songEndHandler}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eutfG9LUnF+FZPxeXdZor2Kn7E8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/MrDjuke/Desktop/Project/weather_music_app/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","Weather","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","weatherStatus","setWeatherStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","console","log","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n\n// Import Styles\nimport \"./styles/app.scss\";\n\n// Import Components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\nimport Weather from \"./components/Weather\";\n\n//Import Util\nimport data from \"./data\";\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  //! State For Time (aktuell)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  //! Library State\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  //! Weather State\n  const [weatherStatus, setWeatherStatus] = useState(false);\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //! Berechnung der Prozent des Fortschrittsbalken\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    console.log(animation);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n    console.log(current);\n  };\n\n  //! Wenn der Song endet spiele den nächsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\n  //* return ************\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav\n        libraryStatus={libraryStatus}\n        setLibraryStatus={setLibraryStatus}\n        weatherStatus={weatherStatus}\n        setWeatherStatus={setWeatherStatus}\n      />\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        isPlaying={isPlaying}\n        currentSong={currentSong}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Weather weatherStatus={weatherStatus} />\n      <Library\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        //! Skip to the next song if ended // Brauchen wir (noch nicht)\n        // onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}