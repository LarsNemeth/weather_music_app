{"ast":null,"code":"var _jsxFileName = \"/Users/MrDjuke/Desktop/Project/weather_music_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; // Import Styles\n\nimport \"./styles/app.scss\"; // Import Components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\"; //Import Util\n\nimport data from \"./util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //! State For Time (aktuell und)\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  }); //! Time Update\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n    console.log(current);\n  }; //* return ************\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Kc/7Yj03h0ab5z2tYr3oYZa8UNQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/MrDjuke/Desktop/Project/weather_music_app/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","timeUpdateHandler","e","current","target","console","log","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC,C,CAEA;;AACA,OAAO,mBAAP,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB,CAFa,CAEkB;AAC/B;;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACK,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C,CANa,CAOb;;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AACvCgB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC,CARa,CAab;;AACA,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASL,WAAzB;AACA,UAAMC,QAAQ,GAAGE,CAAC,CAACE,MAAF,CAASJ,QAA1B;AACAF,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,WAAW,EAAEI,OAA5B;AAAqCH,MAAAA;AAArC,KAAD,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACD,GALD,CAda,CAqBb;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAEH,QADZ;AAEE,MAAA,YAAY,EAAEM,YAFhB;AAGE,MAAA,SAAS,EAAED,SAHb;AAIE,MAAA,WAAW,EAAEF;AAJf;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEF,KAAhB;AAAuB,MAAA,cAAc,EAAEG;AAAvC;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AACE,MAAA,YAAY,EAAEO,iBADhB;AAEE,MAAA,gBAAgB,EAAEA,iBAFpB;AAGE,MAAA,GAAG,EAAEX,QAHP;AAIE,MAAA,GAAG,EAAEG,WAAW,CAACc;AAJnB;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxCQlB,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\n\n// Import Styles\nimport \"./styles/app.scss\";\n\n// Import Components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\n\n//Import Util\nimport data from \"./util\";\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  //! State For Time (aktuell und)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo, currentTime: current, duration });\n    console.log(current);\n  };\n\n  //* return ************\n  return (\n    <div className=\"App\">\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        isPlaying={isPlaying}\n        currentSong={currentSong}\n      />\n      <Library songs={songs} setCurrentSong={setCurrentSong} />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}