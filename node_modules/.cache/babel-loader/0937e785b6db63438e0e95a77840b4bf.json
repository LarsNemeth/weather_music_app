{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/weather-music-app/weather_music_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, createContext } from 'react'; // Import Styles\n\nimport './styles/app.scss'; // Import Components\n\nimport Intro from './components/Intro';\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather'; //Import Util\n\nimport data from './data'; // Export weatherMuscicContext API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const weatherMusicContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //! State For Time (aktuell)\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  }); //! Library State\n\n  const [libraryStatus, setLibraryStatus] = useState(false); //! IntroLogo\n\n  const [intro, setIntro] = useState(null); //! Weather State\n\n  const [weatherStatus, setWeatherStatus] = useState(false);\n  const [weatherdata, setWeatherData] = useState(null); //! Weather City\n\n  const [city, setCity] = useState('Hamburg'); //! Time Update\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //! Berechnung der Prozent des Fortschrittsbalken\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100); // console.log(animation);\n\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    }); // console.log(current);\n  }; //! Change Music Weater Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n\n\n  const changeMood = weatherdata => {\n    // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    const weatherCondition = weatherdata.weather[0].main;\n\n    if (weatherCondition === 'Snow') {\n      setCurrentSong(songs[2]);\n    }\n\n    if (weatherCondition === 'Clouds') {\n      setCurrentSong(songs[3]);\n    }\n\n    if (weatherCondition === 'Rain') {\n      setCurrentSong(songs[0]);\n    }\n\n    if (weatherCondition === 'Clear') {\n      setCurrentSong(songs[1]);\n    }\n\n    if (weatherCondition === 'Mist') {\n      setCurrentSong(songs[4]);\n    }\n\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    }); // console.log('select song');\n\n    setSongs(newSongs); // check if the song is playing\n\n    if (isPlaying) audioRef.current.play();\n  }; //! Change Music Weather Mood Context-API\n\n\n  const bgimgChange = () => {\n    // console.log(weatherdata);\n    if (weatherdata === null) {\n      return;\n    } // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n\n\n    const weatherCondition = weatherdata.weather[0].main; //! Snow\n\n    if (weatherCondition === 'Snow') {\n      return 'weather-app-snow';\n    } //! Clowds\n\n\n    if (weatherCondition === 'Clouds') {\n      return 'weather-app-clowds';\n    } //! Rain\n\n\n    if (weatherCondition === 'Rain') {\n      return 'weather-app-rain'; //! Sun\n    }\n\n    if (weatherCondition === 'Clear') {\n      return 'weather-app-sun';\n    } //!Mist\n\n\n    if (weatherCondition === 'Mist') {\n      return 'weather-app-mist';\n    }\n  }; //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n  //* return ************\n\n\n  return /*#__PURE__*/_jsxDEV(weatherMusicContext.Provider, {\n    value: {\n      changeMood\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `bg-starter-img`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: bgimgChange(),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `App ${libraryStatus ? 'library-active' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${weatherStatus ? 'weather-active' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(Nav, {\n              libraryStatus: libraryStatus,\n              setLibraryStatus: setLibraryStatus,\n              weatherStatus: weatherStatus,\n              setWeatherStatus: setWeatherStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Weather, {\n              weatherStatus: weatherStatus,\n              city: city,\n              setCity: setCity,\n              weatherdata: weatherdata,\n              setWeatherData: setWeatherData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Intro, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Song, {\n                currentSong: currentSong,\n                isPlaying: isPlaying,\n                intro: intro,\n                setIntro: setIntro\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Player, {\n                audioRef: audioRef,\n                setIsPlaying: setIsPlaying,\n                isPlaying: isPlaying,\n                currentSong: currentSong,\n                setSongInfo: setSongInfo,\n                songInfo: songInfo,\n                songs: songs,\n                setSongs: setSongs,\n                setCurrentSong: setCurrentSong\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Library, {\n                audioRef: audioRef,\n                songs: songs,\n                setCurrentSong: setCurrentSong,\n                isPlaying: isPlaying,\n                setSongs: setSongs,\n                libraryStatus: libraryStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n                onTimeUpdate: timeUpdateHandler,\n                onLoadedMetadata: timeUpdateHandler,\n                ref: audioRef,\n                src: currentSong.audio //! Skip to the next song if ended // Brauchen wir (noch nicht)\n                // onEnded={songEndHandler}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sNDBgVcl/aJlPycbDuM67fz4HH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Desktop/weather-music-app/weather_music_app/src/App.js"],"names":["React","useState","useRef","createContext","Intro","Player","Song","Library","Nav","Weather","data","weatherMusicContext","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","intro","setIntro","weatherStatus","setWeatherStatus","weatherdata","setWeatherData","city","setCity","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","changeMood","weatherCondition","weather","main","newSongs","map","song","id","active","play","bgimgChange","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef, createContext } from 'react';\n\n// Import Styles\nimport './styles/app.scss';\n\n// Import Components\nimport Intro from './components/Intro';\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather';\n\n//Import Util\nimport data from './data';\n\n// Export weatherMuscicContext API\n\nexport const weatherMusicContext = createContext({});\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  //! State For Time (aktuell)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  //! Library State\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  //! IntroLogo\n  const [intro, setIntro] = useState(null);\n\n  //! Weather State\n  const [weatherStatus, setWeatherStatus] = useState(false);\n  const [weatherdata, setWeatherData] = useState(null);\n\n  //! Weather City\n  const [city, setCity] = useState('Hamburg');\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //! Berechnung der Prozent des Fortschrittsbalken\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    // console.log(animation);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n    // console.log(current);\n  };\n\n  //! Change Music Weater Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n  const changeMood = (weatherdata) => {\n    // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    const weatherCondition = weatherdata.weather[0].main;\n    if (weatherCondition === 'Snow') {\n      setCurrentSong(songs[2]);\n    }\n    if (weatherCondition === 'Clouds') {\n      setCurrentSong(songs[3]);\n    }\n    if (weatherCondition === 'Rain') {\n      setCurrentSong(songs[0]);\n    }\n    if (weatherCondition === 'Clear') {\n      setCurrentSong(songs[1]);\n    }\n    if (weatherCondition === 'Mist') {\n      setCurrentSong(songs[4]);\n    }\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    // console.log('select song');\n\n    setSongs(newSongs);\n    // check if the song is playing\n    if (isPlaying) audioRef.current.play();\n  };\n\n  //! Change Music Weather Mood Context-API\n\n  const bgimgChange = () => {\n    // console.log(weatherdata);\n    if (weatherdata === null) {\n      return;\n    }\n\n    // const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    const weatherCondition = weatherdata.weather[0].main;\n\n    //! Snow\n    if (weatherCondition === 'Snow') {\n      return 'weather-app-snow';\n    }\n    //! Clowds\n    if (weatherCondition === 'Clouds') {\n      return 'weather-app-clowds';\n    }\n    //! Rain\n    if (weatherCondition === 'Rain') {\n      return 'weather-app-rain';\n      //! Sun\n    }\n    if (weatherCondition === 'Clear') {\n      return 'weather-app-sun';\n    }\n    //!Mist\n    if (weatherCondition === 'Mist') {\n      return 'weather-app-mist';\n    }\n  };\n\n  //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\n  //* return ************\n  return (\n    <weatherMusicContext.Provider value={{ changeMood }}>\n      <div className={`bg-starter-img`}>\n        <div className={bgimgChange()}>\n          <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n            <div className={`${weatherStatus ? 'weather-active' : ''}`}>\n              <Nav\n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus}\n                weatherStatus={weatherStatus}\n                setWeatherStatus={setWeatherStatus}\n              />\n              <Weather\n                weatherStatus={weatherStatus}\n                city={city}\n                setCity={setCity}\n                weatherdata={weatherdata}\n                setWeatherData={setWeatherData}\n              />\n\n              <div>\n                <Intro />\n                <Song\n                  currentSong={currentSong}\n                  isPlaying={isPlaying}\n                  intro={intro}\n                  setIntro={setIntro}\n                />\n                <Player\n                  audioRef={audioRef}\n                  setIsPlaying={setIsPlaying}\n                  isPlaying={isPlaying}\n                  currentSong={currentSong}\n                  setSongInfo={setSongInfo}\n                  songInfo={songInfo}\n                  songs={songs}\n                  setSongs={setSongs}\n                  setCurrentSong={setCurrentSong}\n                />\n                <Library\n                  audioRef={audioRef}\n                  songs={songs}\n                  setCurrentSong={setCurrentSong}\n                  isPlaying={isPlaying}\n                  setSongs={setSongs}\n                  libraryStatus={libraryStatus}\n                />\n                <audio\n                  onTimeUpdate={timeUpdateHandler}\n                  onLoadedMetadata={timeUpdateHandler}\n                  ref={audioRef}\n                  src={currentSong.audio}\n                  //! Skip to the next song if ended // Brauchen wir (noch nicht)\n                  // onEnded={songEndHandler}\n                ></audio>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </weatherMusicContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}