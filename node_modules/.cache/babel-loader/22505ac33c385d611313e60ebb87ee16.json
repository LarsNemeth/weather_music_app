{"ast":null,"code":"var _jsxFileName = \"/Users/MrDjuke/Desktop/Project/weather_music_app/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); // // Add Active State\n    // const newSongs = songs.map((song) => {\n    //   if (song.id === id) {\n    //     return {\n    //       ...song,\n    //       active: true,\n    //     };\n    //   } else {\n    //     return {\n    //       ...song,\n    //       active: false,\n    //     };\n    //   }\n    // });\n    // setSongs(newSongs);\n    // audioRef.current.play();\n    // check if the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    _jsxDEV(\"div\", {\n      onClick: songSelectHandler,\n      className: `library-song ${song.active ? \"selected\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        lat: song.name,\n        src: song.cover,\n        alt: \"moodMusic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/MrDjuke/Desktop/Project/weather_music_app/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","playPromise","current","play","undefined","then","audio","active","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,SANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQd;AACJ,QAAMC,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,cAAc,CAACF,IAAD,CAAd,CAD8B,CAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,QAAIK,SAAJ,EAAe;AACb,YAAMG,WAAW,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAIF,WAAW,KAAKG,SAApB,EAA+B;AAC7BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AAC1BT,UAAAA,QAAQ,CAACK,OAAT,CAAiBC,IAAjB;AACD,SAFD;AAGD;AACF;AACF,GA5BD;;AA8BA;AAAA;AACE;AACA;AACE,MAAA,OAAO,EAAEH,iBADX;AAEE,MAAA,SAAS,EAAG,gBAAeP,IAAI,CAACc,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,8BAIE;AAAK,QAAA,GAAG,EAAEd,IAAI,CAACe,IAAf;AAAqB,QAAA,GAAG,EAAEf,IAAI,CAACgB,KAA/B;AAAsC,QAAA,GAAG,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAA,oBAAKhB,IAAI,CAACe;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAKf,IAAI,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAaD,CApDD;;KAAMlB,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs,\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n    // // Add Active State\n    // const newSongs = songs.map((song) => {\n    //   if (song.id === id) {\n    //     return {\n    //       ...song,\n    //       active: true,\n    //     };\n    //   } else {\n    //     return {\n    //       ...song,\n    //       active: false,\n    //     };\n    //   }\n    // });\n    // setSongs(newSongs);\n\n    // audioRef.current.play();\n    // check if the song is playing\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.then((audio) => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return (\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img lat={song.name} src={song.cover} alt=\"moodMusic\"></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}