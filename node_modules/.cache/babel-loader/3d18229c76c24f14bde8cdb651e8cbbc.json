{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { getWeatherData } from '../../services/apiKeys';\nimport { weatherMusicContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Weather = ({\n  weatherStatus\n}) => {\n  _s();\n\n  const [weatherdata, setWeatherData] = useState(null);\n  const [city, setCity] = useState('Hamburg');\n  const {\n    changeMood\n  } = useContext(weatherMusicContext);\n\n  const getData = async () => {\n    try {\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      console.log(data);\n      changeMood(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from API\", error.message);\n    }\n  }; //* Change City Name *********\n\n\n  const onChangeCity = e => {\n    setCity(e.target.value);\n  }; //* Button Function *********\n\n\n  const onClickButton = () => {\n    getData();\n  }; // //* UseEffect / getData running *********\n  // useEffect(() => {\n  //   getData();\n  // }, []);\n  //* Date Operator ******\n\n\n  const dateBuilder = () => {\n    let d = new Date();\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    let days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  }; //* Change Background-Image\n\n\n  const bgChange = () => {\n    if (weatherdata === null) {\n      return;\n    }\n\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n\n    if (celcius < 16) {\n      return 'weather-app';\n    } else {\n      return 'weather-app-warm';\n    }\n  };\n\n  console.log('Hello from me', weatherdata);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `weather ${weatherStatus ? 'active-weather' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-app\",\n      style: {\n        backgroundImage: 'url(' + `https://source.unsplash.com/500x800/?${onChangeCity}` + ')'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: bgChange(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"search-bar\",\n            placeholder: \"City Sounds\",\n            onChange: onChangeCity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClickButton,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), weatherdata != null ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"location\",\n              children: [weatherdata.name, \" | \", weatherdata.sys.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date\",\n              children: dateBuilder()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temp\",\n              children: [parseFloat(weatherdata.main.temp - 273.15).toFixed(0), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"weather-condition\",\n              children: weatherdata.weather[0].main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"4bmeh6U7dgFrlOLychAiw7UJoJI=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js"],"names":["React","useState","useEffect","useContext","getWeatherData","weatherMusicContext","Weather","weatherStatus","weatherdata","setWeatherData","city","setCity","changeMood","getData","data","console","log","error","message","onChangeCity","e","target","value","onClickButton","dateBuilder","d","Date","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","bgChange","celcius","parseFloat","main","temp","toFixed","backgroundImage","name","sys","country","weather"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { getWeatherData } from '../../services/apiKeys';\n\nimport { weatherMusicContext } from '../../App';\n\nconst Weather = ({ weatherStatus }) => {\n  const [weatherdata, setWeatherData] = useState(null);\n  const [city, setCity] = useState('Hamburg');\n  const { changeMood } = useContext(weatherMusicContext);\n\n  const getData = async () => {\n    try {\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      console.log(data);\n      changeMood(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from API\", error.message);\n    }\n  };\n\n  //* Change City Name *********\n  const onChangeCity = (e) => {\n    setCity(e.target.value);\n  };\n\n  //* Button Function *********\n  const onClickButton = () => {\n    getData();\n  };\n\n  // //* UseEffect / getData running *********\n  // useEffect(() => {\n  //   getData();\n  // }, []);\n\n  //* Date Operator ******\n\n  const dateBuilder = () => {\n    let d = new Date();\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n      'Sunday',\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  //* Change Background-Image\n\n  const bgChange = () => {\n    if (weatherdata === null) {\n      return;\n    }\n\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    if (celcius < 16) {\n      return 'weather-app';\n    } else {\n      return 'weather-app-warm';\n    }\n  };\n\n  console.log('Hello from me', weatherdata);\n\n  return (\n    <div className={`weather ${weatherStatus ? 'active-weather' : ''}`}>\n      <div\n        className=\"weather-app\"\n        style={{\n          backgroundImage:\n            'url(' + `https://source.unsplash.com/500x800/?${onChangeCity}` + ')',\n        }}\n      >\n        <div className={bgChange()}>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"City Sounds\"\n              onChange={onChangeCity}\n            />\n            <button type=\"button\" onClick={onClickButton}>\n              Search\n            </button>\n          </div>\n          {weatherdata != null ? (\n            <div className=\"weather-wrap\">\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weatherdata.name} | {weatherdata.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder()}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {parseFloat(weatherdata.main.temp - 273.15).toFixed(0)}°C\n                </div>\n                <div className=\"weather-condition\">\n                  {weatherdata.weather[0].main}\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}