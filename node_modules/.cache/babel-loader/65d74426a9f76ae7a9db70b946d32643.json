{"ast":null,"code":"var _jsxFileName = \"/Users/MrDjuke/Desktop/Project/weather_music_app/src/components/LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  setCurrentSong,\n  audioRef,\n  isPlaying\n}) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song); // Add Active State\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    }); // audioRef.current.play();\n    // check if the song is playing\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    _jsxDEV(\"div\", {\n      onClick: songSelectHandler,\n      className: `library-song ${song.active ? \"selected\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        lat: song.name,\n        src: song.cover,\n        alt: \"moodMusic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/Users/MrDjuke/Desktop/Project/weather_music_app/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","setCurrentSong","audioRef","isPlaying","songSelectHandler","newSongs","songs","map","id","active","playPromise","current","play","undefined","then","audio","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,cAAR;AAAwBC,EAAAA,QAAxB;AAAkCC,EAAAA;AAAlC,CAAD,KAAmD;AACrE,QAAMC,iBAAiB,GAAG,MAAM;AAC9BH,IAAAA,cAAc,CAACD,IAAD,CAAd,CAD8B,CAE9B;;AACA,UAAMK,QAAQ,GAAGC,KAAK,CAACC,GAAN,CAAWP,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACQ,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGR,IADE;AAELS,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGT,IADE;AAELS,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB,CAH8B,CAgB9B;AACA;;AACA,QAAIN,SAAJ,EAAe;AACb,YAAMO,WAAW,GAAGR,QAAQ,CAACS,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAIF,WAAW,KAAKG,SAApB,EAA+B;AAC7BH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AAC1Bb,UAAAA,QAAQ,CAACS,OAAT,CAAiBC,IAAjB;AACD,SAFD;AAGD;AACF;AACF,GA1BD;;AA4BA;AAAA;AACE;AACA;AACE,MAAA,OAAO,EAAER,iBADX;AAEE,MAAA,SAAS,EAAG,gBAAeJ,IAAI,CAACS,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,8BAIE;AAAK,QAAA,GAAG,EAAET,IAAI,CAACgB,IAAf;AAAqB,QAAA,GAAG,EAAEhB,IAAI,CAACiB,KAA/B;AAAsC,QAAA,GAAG,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAA,oBAAKjB,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAKhB,IAAI,CAACkB;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAaD,CA1CD;;KAAMnB,W;AA4CN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nconst LibrarySong = ({ song, setCurrentSong, audioRef, isPlaying }) => {\n  const songSelectHandler = () => {\n    setCurrentSong(song);\n    // Add Active State\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n    // audioRef.current.play();\n    // check if the song is playing\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.then((audio) => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return (\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img lat={song.name} src={song.cover} alt=\"moodMusic\"></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}