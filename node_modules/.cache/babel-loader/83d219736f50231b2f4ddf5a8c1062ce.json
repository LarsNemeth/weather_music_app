{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/LibrarySong.js\";\nimport React from 'react'; // Delete the util\n// import { playAudio } from \"../util\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs\n}) => {\n  const songSelectHandler = async () => {\n    await setCurrentSong(song); // // Add Active State\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    console.log('select song');\n    setSongs(newSongs); // check if the song is playing\n\n    if (isPlaying) audioRef.current.play(); // audioRef.current.play();\n    //! This Code we are copying to the util-file\n    // if (isPlaying) {\n    //   const playPromise = audioRef.current.play();\n    //   if (playPromise !== undefined) {\n    //     playPromise.then((audio) => {\n    //       audioRef.current.play();\n    //     });\n    //   }\n    // }\n  };\n\n  return (\n    /*#__PURE__*/\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    _jsxDEV(\"div\", {\n      onClick: songSelectHandler,\n      className: `library-song ${song.active ? 'selected' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        lat: song.name,\n        src: song.cover,\n        alt: \"moodMusic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","newSongs","map","active","console","log","current","play","name","cover"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,SANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQd;AACJ,QAAMC,iBAAiB,GAAG,YAAY;AACpC,UAAML,cAAc,CAACF,IAAD,CAApB,CADoC,CAEpC;;AACA,UAAMQ,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAWT,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGH,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGV,IADE;AAELU,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAcAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEAN,IAAAA,QAAQ,CAACE,QAAD,CAAR,CAnBoC,CAoBpC;;AACA,QAAIH,SAAJ,EAAeD,QAAQ,CAACS,OAAT,CAAiBC,IAAjB,GArBqB,CAuBpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAlCD;;AAoCA;AAAA;AACE;AACA;AACE,MAAA,OAAO,EAAEP,iBADX;AAEE,MAAA,SAAS,EAAG,gBAAeP,IAAI,CAACU,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,8BAIE;AAAK,QAAA,GAAG,EAAEV,IAAI,CAACe,IAAf;AAAqB,QAAA,GAAG,EAAEf,IAAI,CAACgB,KAA/B;AAAsC,QAAA,GAAG,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cAJF,eAME;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAWD,CAxDD;;KAAMjB,W;AA0DN,eAAeA,WAAf","sourcesContent":["import React from 'react';\n// Delete the util\n// import { playAudio } from \"../util\";\n\nconst LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs,\n}) => {\n  const songSelectHandler = async () => {\n    await setCurrentSong(song);\n    // // Add Active State\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    console.log('select song');\n\n    setSongs(newSongs);\n    // check if the song is playing\n    if (isPlaying) audioRef.current.play();\n\n    // audioRef.current.play();\n\n    //! This Code we are copying to the util-file\n    // if (isPlaying) {\n    //   const playPromise = audioRef.current.play();\n    //   if (playPromise !== undefined) {\n    //     playPromise.then((audio) => {\n    //       audioRef.current.play();\n    //     });\n    //   }\n    // }\n  };\n\n  return (\n    // wenn der song active ist nimm die Klasse \"selected\", andernfalls nehme die leeren Anführungszeichen\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? 'selected' : ''}`}\n    >\n      <img lat={song.name} src={song.cover} alt=\"moodMusic\"></img>\n      \n      <div className=\"song-description\"></div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}