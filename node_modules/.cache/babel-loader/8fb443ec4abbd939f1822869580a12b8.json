{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, createContext } from 'react'; // Import Styles\n\nimport './styles/app.scss'; // Import Components\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather';\nimport getCityImage from './services/getCityImages'; //Import Util\n\nimport data from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const weatherMusicContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false); //! State For Time (aktuell)\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  }); //! Library State\n\n  const [libraryStatus, setLibraryStatus] = useState(false); //! Weather State\n\n  const [weatherStatus, setWeatherStatus] = useState(false); //! Time Update\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //! Berechnung der Prozent des Fortschrittsbalken\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    console.log(animation);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n    console.log(current);\n  }; //! Weaterh Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n\n\n  const changeMood = weatherdata => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n\n    if (celcius < 16) {\n      setCurrentSong(songs[0]);\n    } else {\n      setCurrentSong(songs[1]);\n    }\n\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    console.log('select song');\n    setSongs(newSongs); // check if the song is playing\n\n    if (isPlaying) audioRef.current.play();\n  }; //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n  //* return ************\n\n\n  return /*#__PURE__*/_jsxDEV(weatherMusicContext.Provider, {\n    value: {\n      changeMood\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `App ${libraryStatus ? 'library-active' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `App ${weatherStatus ? 'weather-active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          libraryStatus: libraryStatus,\n          setLibraryStatus: setLibraryStatus,\n          weatherStatus: weatherStatus,\n          setWeatherStatus: setWeatherStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Song, {\n          currentSong: currentSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Player, {\n          audioRef: audioRef,\n          setIsPlaying: setIsPlaying,\n          isPlaying: isPlaying,\n          currentSong: currentSong,\n          setSongInfo: setSongInfo,\n          songInfo: songInfo,\n          songs: songs,\n          setSongs: setSongs,\n          setCurrentSong: setCurrentSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Weather, {\n          weatherStatus: weatherStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"getCityImage\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Library, {\n          audioRef: audioRef,\n          songs: songs,\n          setCurrentSong: setCurrentSong,\n          isPlaying: isPlaying,\n          setSongs: setSongs,\n          libraryStatus: libraryStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          onTimeUpdate: timeUpdateHandler,\n          onLoadedMetadata: timeUpdateHandler,\n          ref: audioRef,\n          src: currentSong.audio //! Skip to the next song if ended // Brauchen wir (noch nicht)\n          // onEnded={songEndHandler}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eutfG9LUnF+FZPxeXdZor2Kn7E8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js"],"names":["React","useState","useRef","createContext","Player","Song","Library","Nav","Weather","getCityImage","data","weatherMusicContext","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","weatherStatus","setWeatherStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","console","log","changeMood","weatherdata","celcius","parseFloat","main","temp","toFixed","newSongs","map","song","id","active","play","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,aAAlC,QAAuD,OAAvD,C,CAEA;;AACA,OAAO,mBAAP,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,YAAP,MAAyB,0BAAzB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AACA,OAAO,MAAMC,mBAAmB,gBAAGR,aAAa,CAAC,EAAD,CAAzC;;AAEP,SAASS,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB,CAFa,CAEkB;AAC/B;;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACS,IAAI,EAAL,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAACa,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C,CANa,CAQb;;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC;AACvCqB,IAAAA,WAAW,EAAE,CAD0B;AAEvCC,IAAAA,QAAQ,EAAE,CAF6B;AAGvCC,IAAAA,mBAAmB,EAAE;AAHkB,GAAD,CAAxC,CATa,CAeb;;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,KAAD,CAAlD,CAhBa,CAkBb;;AACA,QAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,KAAD,CAAlD,CAnBa,CAqBb;;AACA,QAAM4B,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASV,WAAzB;AACA,UAAMC,QAAQ,GAAGO,CAAC,CAACE,MAAF,CAAST,QAA1B,CAF+B,CAI/B;;AACA,UAAMU,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAvB;AACA,UAAMK,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWZ,QAAX,CAAxB;AACA,UAAMc,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAYF,cAAc,GAAGG,eAAlB,GAAqC,GAAhD,CAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEAhB,IAAAA,WAAW,CAAC,EACV,GAAGD,QADO;AAEVE,MAAAA,WAAW,EAAES,OAFH;AAGVR,MAAAA,QAHU;AAIVC,MAAAA,mBAAmB,EAAEa;AAJX,KAAD,CAAX;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AACD,GAjBD,CAtBa,CAyCb;AACA;;;AACA,QAAMS,UAAU,GAAIC,WAAD,IAAiB;AAClC,UAAMC,OAAO,GAAGC,UAAU,CAACF,WAAW,CAACG,IAAZ,CAAiBC,IAAjB,GAAwB,MAAzB,CAAV,CAA2CC,OAA3C,CAAmD,CAAnD,CAAhB;;AACA,QAAIJ,OAAO,GAAG,EAAd,EAAkB;AAChBzB,MAAAA,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,CAAd;AACD,KAFD,MAEO;AACLG,MAAAA,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,CAAd;AACD;;AACD,UAAMiC,QAAQ,GAAGjC,KAAK,CAACkC,GAAN,CAAWC,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACC,EAAL,KAAYlC,WAAW,CAACkC,EAA5B,EAAgC;AAC9B,eAAO,EACL,GAAGD,IADE;AAELE,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGF,IADE;AAELE,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAcAb,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEAxB,IAAAA,QAAQ,CAACgC,QAAD,CAAR,CAvBkC,CAwBlC;;AACA,QAAI7B,SAAJ,EAAeL,QAAQ,CAACkB,OAAT,CAAiBqB,IAAjB;AAChB,GA1BD,CA3Ca,CAuEb;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEZ,MAAAA;AAAF,KAArC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAG,OAAMf,aAAa,GAAG,gBAAH,GAAsB,EAAG,EAA7D;AAAA,6BACE;AAAK,QAAA,SAAS,EAAG,OAAME,aAAa,GAAG,gBAAH,GAAsB,EAAG,EAA7D;AAAA,gCACE,QAAC,GAAD;AACE,UAAA,aAAa,EAAEF,aADjB;AAEE,UAAA,gBAAgB,EAAEC,gBAFpB;AAGE,UAAA,aAAa,EAAEC,aAHjB;AAIE,UAAA,gBAAgB,EAAEC;AAJpB;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,IAAD;AAAM,UAAA,WAAW,EAAEZ;AAAnB;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,MAAD;AACE,UAAA,QAAQ,EAAEH,QADZ;AAEE,UAAA,YAAY,EAAEM,YAFhB;AAGE,UAAA,SAAS,EAAED,SAHb;AAIE,UAAA,WAAW,EAAEF,WAJf;AAKE,UAAA,WAAW,EAAEK,WALf;AAME,UAAA,QAAQ,EAAED,QANZ;AAOE,UAAA,KAAK,EAAEN,KAPT;AAQE,UAAA,QAAQ,EAAEC,QARZ;AASE,UAAA,cAAc,EAAEE;AATlB;AAAA;AAAA;AAAA;AAAA,gBARF,eAmBE,QAAC,OAAD;AAAS,UAAA,aAAa,EAAEU;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAnBF,eAoBE;AAAA;AAAA;AAAA;AAAA,gBApBF,eAsBE,QAAC,OAAD;AACE,UAAA,QAAQ,EAAEd,QADZ;AAEE,UAAA,KAAK,EAAEC,KAFT;AAGE,UAAA,cAAc,EAAEG,cAHlB;AAIE,UAAA,SAAS,EAAEC,SAJb;AAKE,UAAA,QAAQ,EAAEH,QALZ;AAME,UAAA,aAAa,EAAEU;AANjB;AAAA;AAAA;AAAA;AAAA,gBAtBF,eA8BE;AACE,UAAA,YAAY,EAAEI,iBADhB;AAEE,UAAA,gBAAgB,EAAEA,iBAFpB;AAGE,UAAA,GAAG,EAAEhB,QAHP;AAIE,UAAA,GAAG,EAAEG,WAAW,CAACqC,KAJnB,CAKE;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD;;GA5HQzC,G;;KAAAA,G;AA8HT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef, createContext } from 'react';\n\n// Import Styles\nimport './styles/app.scss';\n\n// Import Components\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather';\nimport getCityImage from './services/getCityImages';\n\n//Import Util\nimport data from './data';\nexport const weatherMusicContext = createContext({});\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  //! State For Time (aktuell)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  //! Library State\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  //! Weather State\n  const [weatherStatus, setWeatherStatus] = useState(false);\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //! Berechnung der Prozent des Fortschrittsbalken\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    console.log(animation);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n    console.log(current);\n  };\n\n  //! Weaterh Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n  const changeMood = (weatherdata) => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    if (celcius < 16) {\n      setCurrentSong(songs[0]);\n    } else {\n      setCurrentSong(songs[1]);\n    }\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    console.log('select song');\n\n    setSongs(newSongs);\n    // check if the song is playing\n    if (isPlaying) audioRef.current.play();\n  };\n\n  //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\n  //* return ************\n  return (\n    <weatherMusicContext.Provider value={{ changeMood }}>\n      <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n        <div className={`App ${weatherStatus ? 'weather-active' : ''}`}>\n          <Nav\n            libraryStatus={libraryStatus}\n            setLibraryStatus={setLibraryStatus}\n            weatherStatus={weatherStatus}\n            setWeatherStatus={setWeatherStatus}\n          />\n          <Song currentSong={currentSong} />\n          <Player\n            audioRef={audioRef}\n            setIsPlaying={setIsPlaying}\n            isPlaying={isPlaying}\n            currentSong={currentSong}\n            setSongInfo={setSongInfo}\n            songInfo={songInfo}\n            songs={songs}\n            setSongs={setSongs}\n            setCurrentSong={setCurrentSong}\n          />\n          <Weather weatherStatus={weatherStatus} />\n          <getCityImage />\n\n          <Library\n            audioRef={audioRef}\n            songs={songs}\n            setCurrentSong={setCurrentSong}\n            isPlaying={isPlaying}\n            setSongs={setSongs}\n            libraryStatus={libraryStatus}\n          />\n          <audio\n            onTimeUpdate={timeUpdateHandler}\n            onLoadedMetadata={timeUpdateHandler}\n            ref={audioRef}\n            src={currentSong.audio}\n            //! Skip to the next song if ended // Brauchen wir (noch nicht)\n            // onEnded={songEndHandler}\n          ></audio>\n        </div>\n      </div>\n    </weatherMusicContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}