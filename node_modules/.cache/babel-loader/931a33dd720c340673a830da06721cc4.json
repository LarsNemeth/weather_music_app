{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getWeatherData } from '../../services/apiKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Weather = ({\n  weatherStatus\n}) => {\n  _s();\n\n  const [weatherdata, setWeatherData] = useState();\n  const [city, setCity] = useState('');\n\n  const getData = async () => {\n    try {\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from API\", error.message);\n    }\n  }; //* Change City Name *********\n\n\n  const onChangeCity = e => {\n    setCity(e.target.value);\n  }; //* Button Function *********\n\n\n  const onClickButton = () => {\n    getData();\n  }; //* UseEffect / getData running *********\n\n\n  useEffect(() => {\n    getData();\n  }, []); //* Date Operator ******\n\n  const dateBuilder = () => {\n    let d = new Date();\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    let days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  }; //* Change Background-Image\n  // const bgChange = () => {\n  //   const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n  //     if (celcius < 16) {\n  //       return 'weather-app';\n  //   } else {\n  //     return 'weather-app-warm';\n  //   }\n  // };\n\n\n  const bgChange = () => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n\n    if (celcius < 16) {\n      return 'weather-app';\n    } else {\n      return 'weather-app-warm';\n    }\n  };\n\n  console.log('Hello from me', weatherdata);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `weather ${weatherStatus ? 'active-weather' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-app-warm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-bar\",\n          placeholder: \"City Sounds\",\n          onChange: onChangeCity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onClickButton,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), weatherdata != null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location\",\n            children: [weatherdata.name, \" | \", weatherdata.sys.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date\",\n            children: dateBuilder()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [parseFloat(weatherdata.main.temp - 273.15).toFixed(0), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-condition\",\n            children: weatherdata.weather[0].main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"k8vf5w/DyaY+9EdN8QQckcK6jok=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/home/user/Desktop/DCI_Projekte/weather_music_app/src/components/weatherComponents/Weather.js"],"names":["React","useState","useEffect","getWeatherData","Weather","weatherStatus","weatherdata","setWeatherData","city","setCity","getData","data","console","log","error","message","onChangeCity","e","target","value","onClickButton","dateBuilder","d","Date","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","bgChange","celcius","parseFloat","main","temp","toFixed","name","sys","country","weather"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getWeatherData } from '../../services/apiKeys';\n\nconst Weather = ({ weatherStatus }) => {\n  const [weatherdata, setWeatherData] = useState();\n  const [city, setCity] = useState('');\n\n  const getData = async () => {\n    try {\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.log(\"Can't get no Data from API\", error.message);\n    }\n  };\n\n  //* Change City Name *********\n  const onChangeCity = (e) => {\n    setCity(e.target.value);\n  };\n\n  //* Button Function *********\n  const onClickButton = () => {\n    getData();\n  };\n\n  //* UseEffect / getData running *********\n  useEffect(() => {\n    getData();\n  }, []);\n\n  //* Date Operator ******\n\n  const dateBuilder = () => {\n    let d = new Date();\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n      'Sunday',\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  //* Change Background-Image\n\n  // const bgChange = () => {\n  //   const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n  //     if (celcius < 16) {\n  //       return 'weather-app';\n  //   } else {\n  //     return 'weather-app-warm';\n  //   }\n  // };\n\n  const bgChange = () => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    if (celcius < 16) {\n      return 'weather-app';\n    } else {\n      return 'weather-app-warm';\n    }\n  };\n\n  console.log('Hello from me', weatherdata);\n\n  return (\n    <div className={`weather ${weatherStatus ? 'active-weather' : ''}`}>\n      <div className=\"weather-app-warm\">\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"City Sounds\"\n            onChange={onChangeCity}\n          />\n          <button type=\"button\" onClick={onClickButton}>\n            Search\n          </button>\n        </div>\n        {weatherdata != null ? (\n          <div className=\"weather-wrap\">\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weatherdata.name} | {weatherdata.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder()}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {parseFloat(weatherdata.main.temp - 273.15).toFixed(0)}°C\n              </div>\n              <div className=\"weather-condition\">\n                {weatherdata.weather[0].main}\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}