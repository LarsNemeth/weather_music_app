{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, createContext } from 'react'; // Import Styles\n\nimport './styles/app.scss'; // Import Components\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather'; //Import Util\n\nimport data from './data'; // Export weatherMuscicContext API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const weatherMusicContext = /*#__PURE__*/createContext({});\n\nfunction App() {\n  _s();\n\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [cityImage, setImageCity] = useState(''); //! State For Time (aktuell)\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  }); //! Library State\n\n  const [libraryStatus, setLibraryStatus] = useState(false); //! Weather State\n\n  const [weatherStatus, setWeatherStatus] = useState(false); //! Time Update\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //! Berechnung der Prozent des Fortschrittsbalken\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    console.log(animation);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n    console.log(current);\n  }; //! Weaterh Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n\n\n  const changeMood = weatherdata => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n\n    if (celcius < 16) {\n      setCurrentSong(songs[0]);\n    } else {\n      setCurrentSong(songs[1]);\n    }\n\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    console.log('select song');\n    setSongs(newSongs); // check if the song is playing\n\n    if (isPlaying) audioRef.current.play();\n  }; //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\n\n  const onChangeCity = e => {\n    setCity(e.target.value);\n    setImageCity(e.target.value);\n  }; //* return ************\n\n\n  return /*#__PURE__*/_jsxDEV(weatherMusicContext.Provider, {\n    value: {\n      changeMood\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-app\",\n      style: {\n        backgroundImage: 'url(' + `https://source.unsplash.com/100x100/?${cityImage}` + ')'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `App ${libraryStatus ? 'library-active' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `App ${weatherStatus ? 'weather-active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(Nav, {\n            libraryStatus: libraryStatus,\n            setLibraryStatus: setLibraryStatus,\n            weatherStatus: weatherStatus,\n            setWeatherStatus: setWeatherStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Song, {\n            currentSong: currentSong\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Player, {\n            audioRef: audioRef,\n            setIsPlaying: setIsPlaying,\n            isPlaying: isPlaying,\n            currentSong: currentSong,\n            setSongInfo: setSongInfo,\n            songInfo: songInfo,\n            songs: songs,\n            setSongs: setSongs,\n            setCurrentSong: setCurrentSong\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Weather, {\n            weatherStatus: weatherStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Library, {\n            audioRef: audioRef,\n            songs: songs,\n            setCurrentSong: setCurrentSong,\n            isPlaying: isPlaying,\n            setSongs: setSongs,\n            libraryStatus: libraryStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            onTimeUpdate: timeUpdateHandler,\n            onLoadedMetadata: timeUpdateHandler,\n            ref: audioRef,\n            src: currentSong.audio //! Skip to the next song if ended // Brauchen wir (noch nicht)\n            // onEnded={songEndHandler}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ke9KWrvLE+kJq+ZVn06Kb5z8mfg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Desktop/DCI_Projekte/weather_music_app/src/App.js"],"names":["React","useState","useRef","createContext","Player","Song","Library","Nav","Weather","data","weatherMusicContext","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","cityImage","setImageCity","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","weatherStatus","setWeatherStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","console","log","changeMood","weatherdata","celcius","parseFloat","main","temp","toFixed","newSongs","map","song","id","active","play","onChangeCity","setCity","value","backgroundImage","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef, createContext } from 'react';\n\n// Import Styles\nimport './styles/app.scss';\n\n// Import Components\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\nimport Weather from './components/weatherComponents/Weather';\n\n//Import Util\nimport data from './data';\n\n// Export weatherMuscicContext API\n\nexport const weatherMusicContext = createContext({});\n\nfunction App() {\n  //! Ref (introducing the html-refernce function with useRef)\n  const audioRef = useRef(null); // The initial (starting) value is set to \"null\"\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [cityImage, setImageCity] = useState('');\n\n  //! State For Time (aktuell)\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n\n  //! Library State\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  //! Weather State\n  const [weatherStatus, setWeatherStatus] = useState(false);\n\n\n\n  //! Time Update\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //! Berechnung der Prozent des Fortschrittsbalken\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    console.log(animation);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n    console.log(current);\n  };\n\n  //! Weaterh Mood Context API\n  // const [weatherMood, setWeatherMood] = useState(null);\n  const changeMood = (weatherdata) => {\n    const celcius = parseFloat(weatherdata.main.temp - 273.15).toFixed(0);\n    if (celcius < 16) {\n      setCurrentSong(songs[0]);\n    } else {\n      setCurrentSong(songs[1]);\n    }\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    console.log('select song');\n\n    setSongs(newSongs);\n    // check if the song is playing\n    if (isPlaying) audioRef.current.play();\n  };\n\n  //! Wenn der Song endet spiele den nÃ¤chsten // Brauchen wir nicht beim Streamen ggf. bei Wetterwechsel\n  // const songEndHandler = async () => {\n  //   let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n  //   await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n  //   if (isPlaying) audioRef.current.play();\n  // };\n\nconst onChangeCity = (e) => {\n  setCity(e.target.value);\n  setImageCity(e.target.value);\n};\n\n\n  //* return ************\n  return (\n    <weatherMusicContext.Provider value={{ changeMood }}>\n      <div\n        className=\"weather-app\"\n        style={{\n          backgroundImage:\n            'url(' + `https://source.unsplash.com/100x100/?${cityImage}` + ')',\n        }}\n      >\n        <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n          <div className={`App ${weatherStatus ? 'weather-active' : ''}`}>\n            <Nav\n              libraryStatus={libraryStatus}\n              setLibraryStatus={setLibraryStatus}\n              weatherStatus={weatherStatus}\n              setWeatherStatus={setWeatherStatus}\n            />\n            <Song currentSong={currentSong} />\n            <Player\n              audioRef={audioRef}\n              setIsPlaying={setIsPlaying}\n              isPlaying={isPlaying}\n              currentSong={currentSong}\n              setSongInfo={setSongInfo}\n              songInfo={songInfo}\n              songs={songs}\n              setSongs={setSongs}\n              setCurrentSong={setCurrentSong}\n            />\n            <Weather weatherStatus={weatherStatus} />\n            <Library\n              audioRef={audioRef}\n              songs={songs}\n              setCurrentSong={setCurrentSong}\n              isPlaying={isPlaying}\n              setSongs={setSongs}\n              libraryStatus={libraryStatus}\n            />\n            <audio\n              onTimeUpdate={timeUpdateHandler}\n              onLoadedMetadata={timeUpdateHandler}\n              ref={audioRef}\n              src={currentSong.audio}\n              //! Skip to the next song if ended // Brauchen wir (noch nicht)\n              // onEnded={songEndHandler}\n            ></audio>\n          </div>\n        </div>\n      </div>\n    </weatherMusicContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}